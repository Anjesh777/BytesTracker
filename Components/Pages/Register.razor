@page "/register"
@inject Database.DatabaseService DbService
@inject NavigationManager Nav
@inject BytesTracker.Services.RegisterService RegisterService

<div class="container w-50">
    <div class="card mt-5">
        <div class="card-header">
            <h3>Register</h3>
        </div>
        <div class="card-body">
            <EditForm Model="@registerModel" OnSubmit="HandleRegister">
                <div class="form-group mt-3">
                    <label>UserName</label>
                    <InputText @bind-Value="registerModel.UserName" class="form-control" />
                </div>
                <div class="form-group mt-3">
                    <label>Password</label>
                    <InputText type="password" @bind-Value="registerModel.Password" class="form-control" />
                </div>
                <button type="submit" class="btn btn-primary w-100 mt-4">Register</button>

                @if (isError)
                {
                    <div class="alert alert-danger mt-3">@errorMessage</div>
                }
                @if (isSuccess)
                {
                    <div class="alert alert-success mt-3">Registration successful!</div>
                }
            </EditForm>
        </div>
    </div>
</div>

@code {
    private Model.Register registerModel = new();
    private bool isError = false;
    private bool isSuccess = false;
    private string errorMessage = string.Empty;

    private async Task HandleRegister()
    {
        try
        {
            isError = false;
            isSuccess = false;

            if (string.IsNullOrWhiteSpace(registerModel.UserName) ||
                string.IsNullOrWhiteSpace(registerModel.Password))

            {
                isError = true;
                errorMessage = "All fields are required";
                return;
            }

            // Check if the user is already registered
            bool isRegistered = await DbService.IsUserRegistered(registerModel.UserName);
            if (isRegistered)
            {
                isError = true;
                errorMessage = "A user with this Name is already registered.";
                return;
            }

            // Proceed with registration
            var user = new Database.Users
                {
                    UserName = registerModel.UserName,
                    Password = registerModel.Password
                };

            await RegisterService.Create_User(user);
            isSuccess = true;
            await Task.Delay(1500); 
        }
        catch (Exception ex)
        {
            isError = true;
            errorMessage = "Login failed: " + ex.Message;
        }
    }
}