@page "/transaction"
@inject Database.DatabaseService DbService;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject BytesTracker.Services.TransactionService TransactionService




<div style="max-width:100%">

    <div class="transaction-container">
        <div class="header">
            <div class="title">Income & Expences</div>
        </div>
        <div class="summary-cards">
            <div class="card debit">
                <div class="amount">Rs 50000</div>
                <div class="label">Debit</div>
            </div>
            <div class="card credit">
                <div class="amount">Rs 50000</div>
                <div class="label">Credited</div>
            </div>
            <div class="card total">
                <div class="amount">Rs 50000</div>
                <div class="label">Total</div>
            </div>
        </div>
        @if (showTransPop)
        {
            <div class="popup-overlay">
                <div class="popup-content">
                    <h2>Amount Manager</h2>
                    <div>

                        <div style="display:flex; justify-content:space-around" class="tranparrent">
                            <div class="transchild">
                                <p style="text-align:center">Sources:</p>
                                <input type="text" />
                            </div>
                            <div>
                                <p style="text-align:center">Amount:</p>
                                <input type="number" />
                            </div>
                        </div>

                        <div style="display:flex; justify-content:space-around" class="tranparrent">
                            <div class="transchild">
                                <p style="text-align:center">Due Date:</p>
                                <input type="date" />
                            </div>
                            <div>
                                <p style="text-align:center">Note</p>
                                <textarea placeholder="Note"></textarea>
                            </div>
                        </div>

                        <div style="display:flex; justify-content:space-around" class="tranparrent">
                            <div>
                                <p style="text-align:center">Status:</p>
                                <select>
                                    <option value="select">Select</option>

                                </select>
                            </div>
                            <div style="display:flex">
                                <div>
                                    <p style="text-align:center">Type </p>
                                    <select>
                                        <option value="select">Select</option>
                                    </select>

                                </div>
                                <div>
                                    <p style="text-align:center">Catagory </p>
                                    <select>
                                        <option value="select">Select</option>
                                    </select>
                                </div>


                            </div>
                        </div>

                    </div>
                    <div>
                        <button @onclick="ClosetransactionManagerPopUp">Add</button>

                        <button class="close-btn" @onclick="ClosetransactionManagerPopUp">Close</button>

                    </div>

                  
                </div>
            </div>
        }




        <div class="form-container">
            <h1 class="title">Transactions</h1>
            <div class="table-controls">
                <div class="search-box">
                    <input type="search" placeholder="search">
                    <button style="background-color:#007bff; color:white">Search</button>
                </div>
                <div class="sort-box">
                    <select>
                        <option>Sort by</option>
                    </select>
                </div>

            </div>
            <table class="tags-table">
                <thead>
                    <tr>
                        <th style="width:13%;">Transaction ID</th>
                        <th style="width:15%;">Created Date</th>
                        <th style="width:15%;">Due Date</th>
                        <th style="width:20%;">Title</th>
                        <th style="width:15%;">Amount</th>
                        <th style="width:10%;">Type</th>
                        <th style="width:20%;">Category</th>
                    </tr>

                </thead>
                <tbody>
                    @{
                        transactioncounter = 15;
                        int remainingTransactio = transactioncounter;
                    }


                    @foreach (var tag in userTags)
                    {
                        <tr>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                        </tr>

                        remainingTransactio--; 
                    }
                    @for (int i =1; i < remainingTransactio; i++)
                    {

                        <tr>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>

                        </tr>

                    }

                </tbody>
            </table>
            <div class="button-container">
                <button id="add-trans" @onclick="ShowtransactionManagerPopUp">Add</button>
            </div>
        </div>
    </div>
</div>




<div class="form-container">
    <h1 class="title">Create Tags</h1>
    <EditForm Model="@tagModel" OnSubmit="@HandleSubmit">
        <div class="form-content">
            <div class="tagheader">
                <div class="form-group">
                    <label class="form-label">Tag Name</label>
                    <InputText @bind-Value="tagModel.TagName" class="custom-form" />
                </div>
                <div class="form-group">
                    <label class="form-label">Tag Description</label>
                    <textarea @bind="tagModel.TagDescription" class="custom-form tag-description"></textarea>
                </div>
                <button type="submit" class="btn btn-submit">Submit</button>
            </div>
            @if (isError)
            {
                <div class="alert alert-danger">@errorMessage</div>
                <button type="button" @onclick="CloseErrorPopUp" class="close-btn">Close</button>
            }
            @if (isSuccess)
            {
                <div class="alert alert-success">Operation successful!</div>
                <button type="button" @onclick="CloseSuccessPopUp" class="close-btn">Close</button>
            }
        </div>
    </EditForm>
    <table class="tags-table">
        <thead>
            <tr>
                <th>Tag Id</th>
                <th>Created At</th>
                <th>Tag Name</th>
                <th>Tag Description</th>
            </tr>
        </thead>
        <tbody>
            @{
                tagcounter = 6;
                int remainingTags = tagcounter;
            }

            @foreach (var tag in userTags)
            {
                @if (remainingTags > 0)
                {


                    <tr>
                        <td>@tag.id</td>
                        <td>@tag.created_at.ToShortDateString()</td>
                        <td>@tag.TagName</td>
                        <td>@tag.TagDescription <button @onclick="() => HandleDeleteTag(tag.id)" class="delete-btn">Delete</button></td>
                    </tr>

                    remainingTags--;
                        
                }
            }

            @for (int i = 1; i < remainingTags; i++)
            {

                <tr>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                </tr>

            }

        </tbody>
    </table>
</div>




@code {
    int tagcounter = 0;
    int transactioncounter = 0;

    private bool showTransPop = false;


    private Model.Tags tagModel = new();
    private bool isError = false;
    private bool isSuccess = false;
    private string errorMessage = string.Empty;
    private List<Database.Tags> userTags = new();



    private void ShowtransactionManagerPopUp()
    {
        showTransPop = true;
    }

    private void ClosetransactionManagerPopUp()
    {
        showTransPop = false;
    }




    private void CloseErrorPopUp()
    {
        isError = false;
        errorMessage = string.Empty;
        StateHasChanged();

    }
    private void CloseSuccessPopUp()
    {
        isSuccess = false;
        StateHasChanged();

    }

    private async Task getAllTags()
    {
        var UserName = await localStorage.GetItemAsync<string>("username");
        int userId = await TransactionService.GetUserIdByUsername(UserName);
        userTags = await TransactionService.GetUserTags(userId);

    }

    private async Task HandleDeleteTag(int tagID)
    {

        var UserName = await localStorage.GetItemAsync<string>("username");

        int userId = await TransactionService.GetUserIdByUsername(UserName);

        await TransactionService.DeleteTag(tagID, userId);

        userTags = await DbService.Get_Tag(userId);

        StateHasChanged();
    }




    private async Task HandleSubmit()
    {

        try
        {

            isError = false;
            isSuccess = false;
            if (string.IsNullOrWhiteSpace(tagModel.TagName) ||
                string.IsNullOrWhiteSpace(tagModel.TagDescription))
            {
                isError = true;
                errorMessage = "All fields are required";
                return;
            }
            var UserName = await localStorage.GetItemAsync<string>("username");
            int userID = await DbService.Get_UserID(UserName);

            var tags = new Database.Tags
                {
                    user_id = userID,
                    TagName = tagModel.TagName,
                    TagDescription = tagModel.TagDescription

                };

            await DbService.Add_Tag(tags);
            isSuccess = true;
            await Task.Delay(1500);
            userTags = await DbService.Get_Tag(userID);
            StateHasChanged();


        }
        catch (Exception e)
        {
            isError = true;
            errorMessage = "Adding Tag Failed: " + e.Message;
        }

    }



    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userName = await localStorage.GetItemAsync<string>("username");
            int userId = await DbService.Get_UserID(userName);
            userTags = await DbService.Get_Tag(userId);
        }
        catch (Exception e)
        {

            isError = true;
            errorMessage = "Initialization failed: " + e.Message;

        }


    }



}
